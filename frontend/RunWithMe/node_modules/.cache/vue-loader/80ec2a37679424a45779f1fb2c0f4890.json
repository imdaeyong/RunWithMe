{"remainingRequest":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\multicampus\\Desktop\\vue-main\\src\\views\\app\\widgets\\widgetStatistics.vue?vue&type=template&id=02d500af&","dependencies":[{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\src\\views\\app\\widgets\\widgetStatistics.vue","mtime":1600674576000},{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9Im1haW4tY29udGVudCI+CiAgICAKICAgIDxicmVhZGN1bWIgOnBhZ2U9IidXaWRnZXQgU3RhdGlzdGljcyciIDpmb2xkZXI9IidXaWRnZXRzJyIgLz4KICAgIDxiLXJvdz4KICAgICAgICA8Yi1jb2wgbGc9IjMiIG1kPSI2IiBzbT0iNiI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9ImNhcmQtaWNvbi1iZyBjYXJkLWljb24tYmctcHJpbWFyeSBvLWhpZGRlbiBtYi0zMCBvLWhpZGRlbiAgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImktQ2FyLUl0ZW1zIj48L2k+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtdC0yIG1iLTAiPk5ldyBMZWFkczwvcD4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1wcmltYXJ5IHRleHQtMjQgbGluZS1oZWlnaHQtMSBtYi0yIj4yMDU8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbGc9IjMiIG1kPSI2IiBzbT0iNiI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9ImNhcmQtaWNvbi1iZyBjYXJkLWljb24tYmctcHJpbWFyeSBvLWhpZGRlbiBtYi0zMCBvLWhpZGRlbiAgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImktRGF0YS1VcGxvYWQiPjwvaT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG10LTIgbWItMCI+RG93bmxvYWQ8L3A+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtcHJpbWFyeSB0ZXh0LTI0IGxpbmUtaGVpZ2h0LTEgbWItMiI+NDAyMTwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBsZz0iMyIgbWQ9IjYiIHNtPSI2Ij4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iY2FyZC1pY29uLWJnIGNhcmQtaWNvbi1iZy1wcmltYXJ5IG8taGlkZGVuIG1iLTMwIG8taGlkZGVuICB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1GZWVkYnVybmVyIj48L2k+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtdC0yIG1iLTAiPkZlZWRiYWNrPC9wPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXByaW1hcnkgdGV4dC0yNCBsaW5lLWhlaWdodC0xIG1iLTIiPjgwPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIGxnPSIzIiBtZD0iNiIgc209IjYiPgogICAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSJjYXJkLWljb24tYmcgY2FyZC1pY29uLWJnLXByaW1hcnkgby1oaWRkZW4gbWItMzAgby1oaWRkZW4gIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpLUZpbGUtSG9yaXpvbnRhbC1UZXh0Ij48L2k+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtdC0yIG1iLTAiPk9waW5pb248L3A+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtcHJpbWFyeSB0ZXh0LTI0IGxpbmUtaGVpZ2h0LTEgbWItMiI+MTIwMDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIAogICAgICAgIDwhLS0gd2lkZ2V0LWNoYXJ0IHBoYXNlLTEgLS0+CiAgICAgICAgPGItY29sICBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgPGItY2FyZCBuby1ib2R5IHRpdGxlPSIiIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NoYXJ0LWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImhlYWRpbmciPklOQ09NRTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY2hhcnQtbnVtYmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idC1mb250LWJvbGRlc3QiPiQxMDAwPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+NDYlIGNvbXBhcmVkIHRvIGxhc3QgeWVhcjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8Yi1jYXJkLWJvZHkgY2xhc3M9InVsLWNhcmRfX3dpZGdldC1jaGFydCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYmFzaWNBcmVhLWNoYXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGFwZXhjaGFydCB0eXBlPWFyZWEgIGhlaWdodD0xNTAgOm9wdGlvbnM9InNwbGluZUFyZWFXaWRnZXQuY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJzcGxpbmVBcmVhV2lkZ2V0LnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9iLWNhcmQtYm9keT4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sICBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgPGItY2FyZCBuby1ib2R5IHRpdGxlPSIiIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NoYXJ0LWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImhlYWRpbmciPkFQUFJPVkU8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NoYXJ0LW51bWJlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InQtZm9udC1ib2xkZXN0Ij4kNTAwPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+NDYlIGNvbXBhcmVkIHRvIGxhc3QgeWVhcjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8Yi1jYXJkLWJvZHkgY2xhc3M9InVsLWNhcmRfX3dpZGdldC1jaGFydCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYmFzaWNBcmVhLWNoYXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGFwZXhjaGFydCB0eXBlPWFyZWEgIGhlaWdodD0xNTAgOm9wdGlvbnM9InNwbGluZUFyZWFXaWRnZXRUd28uY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJzcGxpbmVBcmVhV2lkZ2V0VHdvLnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9iLWNhcmQtYm9keT4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sICBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgPGItY2FyZCBuby1ib2R5IHRpdGxlPSIiIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY2hhcnQtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJoZWFkaW5nIj50cmFuc2FjdGlvbjwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY2hhcnQtbnVtYmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idC1mb250LWJvbGRlc3QiPiQ0NCw5MDk8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj40NiUgY29tcGFyZWQgdG8gbGFzdCB5ZWFyPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPGItY2FyZC1ib2R5IGNsYXNzPSJ1bC1jYXJkX193aWRnZXQtY2hhcnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImJhc2ljQXJlYS1jaGFydCIgPgogICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9YXJlYSAgaGVpZ2h0PTE1MCA6b3B0aW9ucz0ic3BsaW5lQXJlYVdpZGdldFRocmVlLmNoYXJ0T3B0aW9ucyIgOnNlcmllcz0ic3BsaW5lQXJlYVdpZGdldFRocmVlLnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9iLWNhcmQtYm9keT4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sICBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgPGItY2FyZCBuby1ib2R5IHRpdGxlPSIiIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY2hhcnQtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJoZWFkaW5nIj5TQUxFUzwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY2hhcnQtbnVtYmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idC1mb250LWJvbGRlc3QiPiQ1MDA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj40NiUgY29tcGFyZWQgdG8gbGFzdCB5ZWFyPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPGItY2FyZC1ib2R5IGNsYXNzPSJ1bC1jYXJkX193aWRnZXQtY2hhcnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImJhc2ljQXJlYS1jaGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcGV4Y2hhcnQgdHlwZT1hcmVhICBoZWlnaHQ9MTUwIDpvcHRpb25zPSJzcGxpbmVBcmVhV2lkZ2V0Rm91ci5jaGFydE9wdGlvbnMiIDpzZXJpZXM9InNwbGluZUFyZWFXaWRnZXRGb3VyLnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9iLWNhcmQtYm9keT4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sICBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgPGItY2FyZCBuby1ib2R5IHRpdGxlPSIiIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY2hhcnQtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJoZWFkaW5nIHRleHQtMjAgIGxpbmUtaGVpZ2h0LTEgbWItMyI+PGkgY2xhc3M9ImktTGlrZS0yIj48L2k+IEFwcHJvdmU8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NoYXJ0LW51bWJlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9IiI+NTUsMDAwPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPGItY2FyZC1ib2R5IGNsYXNzPSJ1bC1jYXJkX193aWRnZXQtY2hhcnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImJhc2ljQXJlYS1jaGFydCIgPgogICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9YXJlYSAgaGVpZ2h0PTE1MCA6b3B0aW9ucz0ic3BsaW5lQXJlYVdpZGdldEZpdmUuY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJzcGxpbmVBcmVhV2lkZ2V0Rml2ZS5zZXJpZXMiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvYi1jYXJkLWJvZHk+CiAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCAgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgIDxiLWNhcmQgbm8tYm9keSB0aXRsZT0iIiBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NoYXJ0LWluZm8iPgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaGVhZGluZyB0ZXh0LTIwICBsaW5lLWhlaWdodC0xIG1iLTMiPjxpIGNsYXNzPSJpLUZpbGUtSG9yaXpvbnRhbC1UZXh0Ij48L2k+IENvbW1lbnRzPC9oNT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NoYXJ0LW51bWJlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iIj41NSwwMDA8L2g2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDxiLWNhcmQtYm9keSBjbGFzcz0idWwtY2FyZF9fd2lkZ2V0LWNoYXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYXNpY0FyZWEtY2hhcnQiID4KICAgICAgICAgICAgICAgICAgICAgICAgPGFwZXhjaGFydCB0eXBlPWFyZWEgIGhlaWdodD0xNTAgOm9wdGlvbnM9InNwbGluZUFyZWFXaWRnZXRTaXguY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJzcGxpbmVBcmVhV2lkZ2V0U2l4LnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9iLWNhcmQtYm9keT4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sICBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgICA8Yi1jYXJkIG5vLWJvZHkgdGl0bGU9IiIgY2xhc3M9IiBtYi0zMCBvLWhpZGRlbiAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY2hhcnQtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaGVhZGluZyB0ZXh0LTIwICBsaW5lLWhlaWdodC0xIG1iLTMiPjxpIGNsYXNzPSJpLVNoYXJldGhpcyI+PC9pPiBDb250cmlidXRpb248L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jaGFydC1udW1iZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iIj40NSwwMDA8L2g2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGItY2FyZC1ib2R5IGNsYXNzPSJ1bC1jYXJkX193aWRnZXQtY2hhcnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYXNpY0FyZWEtY2hhcnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFwZXhjaGFydCB0eXBlPWFyZWEgIGhlaWdodD0xNTAgOm9wdGlvbnM9InNwbGluZUFyZWFXaWRnZXRTZXZlbi5jaGFydE9wdGlvbnMiIDpzZXJpZXM9InNwbGluZUFyZWFXaWRnZXRTZXZlbi5zZXJpZXMiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9iLWNhcmQtYm9keT4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgIG1kPSI2IiBsZz0iMyI+CiAgICAgICAgICAgIDxiLWNhcmQgbm8tYm9keSB0aXRsZT0iIiBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jaGFydC1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJoZWFkaW5nIHRleHQtMjAgIGxpbmUtaGVpZ2h0LTEgbWItMyI+PGkgY2xhc3M9ImktRXllIj48L2k+IFdhdGNoPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jaGFydC1udW1iZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSIiPjcwLDAwMDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxiLWNhcmQtYm9keSBjbGFzcz0idWwtY2FyZF9fd2lkZ2V0LWNoYXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYmFzaWNBcmVhLWNoYXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcGV4Y2hhcnQgdHlwZT1hcmVhICAgaGVpZ2h0PTE1MCA6b3B0aW9ucz0ic3BsaW5lQXJlYVdpZGdldEVpZ2h0LmNoYXJ0T3B0aW9ucyIgOnNlcmllcz0ic3BsaW5lQXJlYVdpZGdldEVpZ2h0LnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNhcmQtYm9keT4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KCiAgICAgICAgPCEtLSB3aWRnZXQtY2hhcnQtLWxpbmUtLWJhciBwaGFzZS0yIC0tPgogICAgICAgIDxiLWNvbCAgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCB0aXRsZT0iIiBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3JvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0id2lkZ2V0QmFyQ2hhcnQiPgogICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9YmFyIGhlaWdodD0xNTAgOm9wdGlvbnM9IndpZGdldEJhckNoYXJ0LmNoYXJ0T3B0aW9ucyIgOnNlcmllcz0id2lkZ2V0QmFyQ2hhcnQuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSIgdGV4dC1tdXRlIG0tMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFBlb3BsZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmciPjIsNzUwPC9oND4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sICBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgICA8Yi1jYXJkIHRpdGxlPSIiIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ3aWRnZXRCYXJDaGFydCI+CiAgICAgICAgICAgICAgICAgICAgIDxhcGV4Y2hhcnQgdHlwZT1iYXIgaGVpZ2h0PTE1MCA6b3B0aW9ucz0id2lkZ2V0QmFyQ2hhcnRUd28uY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJ3aWRnZXRCYXJDaGFydFR3by5zZXJpZXMiIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IiB0ZXh0LW11dGUgbS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgVmlld3MKICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkaW5nIj4yLDc1MDwvaDQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCAgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCB0aXRsZT0iIiBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3JvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0id2lkZ2V0QmFyQ2hhcnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9bGluZSBoZWlnaHQ9MTUwIDpvcHRpb25zPSJ3aWRnZXRMaW5lQ2hhcnQuY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJ3aWRnZXRMaW5lQ2hhcnQuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSIgdGV4dC1tdXRlIG0tMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcm93dGgKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmciPjYsNzYwPC9oND4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCAgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCB0aXRsZT0iIiBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3JvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0id2lkZ2V0QmFyQ2hhcnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9bGluZSBoZWlnaHQ9MTUwIDpvcHRpb25zPSJ3aWRnZXRMaW5lQ2hhcnQuY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJ3aWRnZXRMaW5lQ2hhcnQuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSIgdGV4dC1tdXRlIG0tMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcm93dGgKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmciPjYsNzYwPC9oND4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIAogICAgICAgIDwhLS0gd2lkZ2V0LWNoYXJ0LS1iYXIgcGhhc2UtMyAtLT4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIiBtdD0iMyI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9IiBtYi0zMCBvLWhpZGRlbiAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19yb3ctdjIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNoYXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGFwZXhjaGFydCB0eXBlPWJhciAgaGVpZ2h0PTEwMCA6b3B0aW9ucz0id2lkZ2V0QmFyQ2hhcnRUaHJlZS5jaGFydE9wdGlvbnMiIDpzZXJpZXM9IndpZGdldEJhckNoYXJ0VGhyZWUuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudC12MiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iaGVhZGluZyBtdC0zIj42OTggMjEyPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iIHRleHQtbXV0ZWQgbS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1MCUgQXZlcmFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBtZD0iNiIgbGc9IjMiIG10PSIzIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3Jvdy12MiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY2hhcnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9YmFyICBoZWlnaHQ9MTAwIDpvcHRpb25zPSJ3aWRnZXRCYXJDaGFydEZvdXIuY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJ3aWRnZXRCYXJDaGFydEZvdXIuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudC12MiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iaGVhZGluZyBtdC0zIj4zNjkgMjEyPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iIHRleHQtbXV0ZWQgbS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNCUgQXZlcmFnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPiAKICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIiBtdD0iMyI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9IiBtYi0zMCBvLWhpZGRlbiAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19yb3ctdjIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNoYXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGFwZXhjaGFydCB0eXBlPWJhciAgaGVpZ2h0PTEwMCA6b3B0aW9ucz0id2lkZ2V0QmFyQ2hhcnRGaXZlLmNoYXJ0T3B0aW9ucyIgOnNlcmllcz0id2lkZ2V0QmFyQ2hhcnRGaXZlLnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmcgbXQtMyI+MzY5IDIxMjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9IiB0ZXh0LW11dGVkIG0tMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjQlIEF2ZXJhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4gCiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyIgbXQ9IjMiPgogICAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93LXYyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjaGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcGV4Y2hhcnQgdHlwZT1iYXIgaGVpZ2h0PTEwMCA6b3B0aW9ucz0id2lkZ2V0QmFyQ2hhcnRTaXguY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJ3aWRnZXRCYXJDaGFydFNpeC5zZXJpZXMiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jb250ZW50LXYyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkaW5nIG10LTMiPjM2OSAyMTI8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSIgdGV4dC1tdXRlZCBtLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI0JSBBdmVyYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+IAoKICAgICAgICA8IS0tIHNtYWxsLXdpZGdldCBwaGFzZS00LS0+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9Im1iLTMwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtc3RhdF9fZm9udCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpLUhvdGVsIHRleHQtcHJpbWFyeSI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSIgbS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBc3NldHMKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmciPjQwLDg5NDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0ibWItMzAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19yb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zdGF0X19mb250Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImktQmFyLUNoYXJ0IHRleHQtZGFuZ2VyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IiBtLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2dyZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkaW5nIj44MCU8L2g0PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9Im1iLTMwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtc3RhdF9fZm9udCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpLUZ1bGwtQ2FydCB0ZXh0LXN1Y2Nlc3MiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iIG0tMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb3RhbCBQcm9maXQKICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmciPuCnsyAyMDAwPC9oND4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSJtYi0zMCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3JvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0LXN0YXRfX2ZvbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImktQm9va21hcmsgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IiBtLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlYXNlCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkaW5nIj4gNSw0MTc8L2g0PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CgogICAgICAgIDwhLS0gYXBleC1waWUtLWNoYXJ0IHBoYXNlLTUgLS0+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyIgIGNsYXNzPSIiPgogICAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93LXYyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjaGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcGV4Y2hhcnQgdHlwZT1yYWRpYWxCYXIgaGVpZ2h0PTI1MCA6b3B0aW9ucz0icmFkaWFsQmFyLmNoYXJ0T3B0aW9ucyIgOnNlcmllcz0icmFkaWFsQmFyLnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmcgbXQtMyI+UGVvcGxlIENob2ljZSBSYXRlPC9oND4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBtZD0iNiIgbGc9IjMiICBjbGFzcz0iIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3Jvdy12MiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY2hhcnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9cmFkaWFsQmFyIGhlaWdodD0yNTAgOm9wdGlvbnM9InJhZGlhbEJhclR3by5jaGFydE9wdGlvbnMiIDpzZXJpZXM9InJhZGlhbEJhclR3by5zZXJpZXMiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jb250ZW50LXYyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkaW5nIG10LTMiPkl0ZW0gUGVuZGluZzwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIiBjbGFzcz0iIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3Jvdy12MiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY2hhcnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9cmFkaWFsQmFyIGhlaWdodD0yNTAgOm9wdGlvbnM9InJhZGlhbEJhclRocmVlLmNoYXJ0T3B0aW9ucyIgOnNlcmllcz0icmFkaWFsQmFyVGhyZWUuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudC12MiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iaGVhZGluZyBtdC0zIj5Ub3RhbCBQcm9maXQ8L2g0PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyIgY2xhc3M9IiI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9Im1iLTMwIG8taGlkZGVuIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93LXYyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjaGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcGV4Y2hhcnQgdHlwZT1yYWRpYWxCYXIgaGVpZ2h0PTI1MCA6b3B0aW9ucz0icmFkaWFsQmFyRm91ci5jaGFydE9wdGlvbnMiIDpzZXJpZXM9InJhZGlhbEJhckZvdXIuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudC12MiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iaGVhZGluZyBtdC0zIj5Ub3RhbCBSZXZlbnVlPC9oND4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIAogICAgICAgIDwhLS0gYXBleC1iYXItLWNoYXJ0IHBoYXNlLTYgLS0+CiAgICAgICAgPGItY29sIG1kPSI0IiBsZz0iNCIgPgogICAgICAgICAgICA8Yi1jYXJkIG5vLWJvZHkgY2xhc3M9Im1iLTMwIG8taGlkZGVuIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93LXYyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImhlYWRpbmcgbXQtMyI+Njk4PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iIHRleHQtbXV0ZWQgbS0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3JkZXJzIFJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYmFzaWNBcmVhLWNoYXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9YXJlYSAgaGVpZ2h0PTE1MCA6b3B0aW9ucz0iYmFzaWNBcmVhLmNoYXJ0T3B0aW9ucyIgOnNlcmllcz0iYmFzaWNBcmVhLnNlcmllcyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSI0IiBsZz0iNCIgPgogICAgICAgICAgICA8Yi1jYXJkIG5vLWJvZHkgY2xhc3M9Im1iLTMwIG8taGlkZGVuIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93LXYyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImhlYWRpbmcgbXQtMyI+NSw3Njc8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSIgdGV4dC1tdXRlZCBtLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvdGFsIE1hcmtldGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImJhc2ljQXJlYS1jaGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFwZXhjaGFydCB0eXBlPWFyZWEgIGhlaWdodD0xNTAgOm9wdGlvbnM9ImJhc2ljQXJlYVR3by5jaGFydE9wdGlvbnMiIDpzZXJpZXM9ImJhc2ljQXJlYVR3by5zZXJpZXMiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBtZD0iNCIgbGc9IjQiID4KICAgICAgICAgICAgPGItY2FyZCBuby1ib2R5IGNsYXNzPSJtYi0zMCBvLWhpZGRlbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3Jvdy12MiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jb250ZW50LXYyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJoZWFkaW5nIG10LTMiPiQ1LDc2NzwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9IiB0ZXh0LW11dGVkIG0tMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG90YWwgRWFybmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImJhc2ljQXJlYS1jaGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFwZXhjaGFydCB0eXBlPWFyZWEgIGhlaWdodD0xNTAgOm9wdGlvbnM9ImJhc2ljQXJlYVRocmVlLmNoYXJ0T3B0aW9ucyIgOnNlcmllcz0iYmFzaWNBcmVhVGhyZWUuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KCiAgICAgICAgPCEtLSBzbWFsbC13aXphcmRfdHdvIHBoYXNlLTcgLS0+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyIgPgogICAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMyI+U2VydmVyIHN0YXR1cyByZWdpb24gMTwvaDY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC0yMCB0ZXh0LXN1Y2Nlc3MgbGluZS1oZWlnaHQtMSBtYi0zIj48aSBjbGFzcz0iaS1BcnJvdy1VcC1pbi1DaXJjbGUiPjwvaT4gVXA8L3A+CiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPkxhc3QgZG93biA0IGRheXMgYWdvPC9zbWFsbD4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIiA+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9IiBtYi0zMCBvLWhpZGRlbiAiPgogICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0zIj5TZXJ2ZXIgc3RhdHVzIHJlZ2lvbiAyPC9oNj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LTIwIHRleHQtc3VjY2VzcyBsaW5lLWhlaWdodC0xIG1iLTMiPjxpIGNsYXNzPSJpLUFycm93LVVwLWluLUNpcmNsZSI+PC9pPiBVcDwvcD4KICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+TGFzdCBkb3duIDQgZGF5cyBhZ288L3NtYWxsPgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBtZD0iNiIgbGc9IjMiID4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTMiPlNlcnZlciBzdGF0dXMgcmVnaW9uIDM8L2g2PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtMjAgdGV4dC1kYW5nZXIgbGluZS1oZWlnaHQtMSBtYi0zIj48aSBjbGFzcz0iaS1BcnJvdy1Eb3duLWluLUNpcmNsZSI+PC9pPiBEb3duPC9wPgogICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj5MYXN0IGRvd24gNCBkYXlzIGFnbzwvc21hbGw+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyIgPgogICAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMyI+U2VydmVyIHN0YXR1cyByZWdpb24gMzwvaDY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC0yMCB0ZXh0LWRhbmdlciBsaW5lLWhlaWdodC0xIG1iLTMiPjxpIGNsYXNzPSJpLUFycm93LURvd24taW4tQ2lyY2xlIj48L2k+IERvd248L3A+CiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPkxhc3QgZG93biA0IGRheXMgYWdvPC9zbWFsbD4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KCiAgICAgICAgPCEtLSBlY2hhcnQtbGluZS1iYXIgcGhhc2UtNiAtLT4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIiBjbGFzcz0iIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTEiPlRhZmZpYyBpbiBsYXN0IDI0aDwvaDY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC0yMiB0ZXh0LXN1Y2Nlc3MgZm9udC13ZWlnaHQtbGlnaHQgbWItMSI+MTMwMDA8L3A+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGFydC13cmFwcGVyIiBzdHlsZT0iaGVpZ2h0OiA2NXB4OyI+CiAgICAgICAgICAgICAgICAgICAgPHYtY2hhcnQgOm9wdGlvbnM9IndpZGdldEJhc2ljTGluZSIgOmF1dG9yZXNpemU9InRydWUiPjwvdi1jaGFydD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBtZD0iNiIgbGc9IjMiIGNsYXNzPSIiPgogICAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSIgbWItMzAgby1oaWRkZW4gIj4KICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMSI+VGFmZmljIGluIGxhc3Qgd2VlazwvaDY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC0yMiB0ZXh0LWRhbmdlciBmb250LXdlaWdodC1saWdodCBtYi0xIj42NTA1ODwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoYXJ0LXdyYXBwZXIiIHN0eWxlPSJoZWlnaHQ6IDY1cHg7Ij4KICAgICAgICAgICAgICAgICAgICA8di1jaGFydCA6b3B0aW9ucz0id2lkZ2V0QmFzaWNMaW5lVHdvIiA6YXV0b3Jlc2l6ZT0idHJ1ZSI+PC92LWNoYXJ0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyIgY2xhc3M9IiI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9IiBtYi0zMCBvLWhpZGRlbiAiPgogICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0xIj5UYWZmaWMgaW4gbGFzdCAyNGg8L2g2PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtMjIgdGV4dC1zdWNjZXNzIGZvbnQtd2VpZ2h0LWxpZ2h0IG1iLTEiPjEzMDAwPC9wPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hhcnQtd3JhcHBlciIgc3R5bGU9ImhlaWdodDogNjVweDsiPgogICAgICAgICAgICAgICAgICAgIDx2LWNoYXJ0IDpvcHRpb25zPSJ3aWRnZXRCYXNpY0xpbmUiIDphdXRvcmVzaXplPSJ0cnVlIj48L3YtY2hhcnQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIiBjbGFzcz0iIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTEiPlRhZmZpYyBpbiBsYXN0IHdlZWs8L2g2PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtMjIgdGV4dC1kYW5nZXIgZm9udC13ZWlnaHQtbGlnaHQgbWItMSI+NjUwNTg8L3A+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGFydC13cmFwcGVyIiBzdHlsZT0iaGVpZ2h0OiA2NXB4OyI+CiAgICAgICAgICAgICAgICAgICAgPHYtY2hhcnQgOm9wdGlvbnM9IndpZGdldEJhc2ljTGluZVR3byIgOmF1dG9yZXNpemU9InRydWUiPjwvdi1jaGFydD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDwhLS0gd2l6YXJkLXByb2dyZXNzYmFyIHBoYXNlLTktLT4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTIgdGV4dC1tdXRlZCI+U3RvcmFnZSBVc2FnZTwvaDY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMSB0ZXh0LTIyIGZvbnQtd2VpZ2h0LWxpZ2h0Ij41MCU8L3A+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxiLXByb2dyZXNzIHZhcmlhbnQ9InN1Y2Nlc3MiIGhlaWdodD0iNHB4IiA6dmFsdWU9InZhbHVlIj48L2ItcHJvZ3Jlc3M+CiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPk1vc3QgZGF0YSB1c2VkIGluIGxhc3QgMyBkYXlzPC9zbWFsbD4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTIgdGV4dC1tdXRlZCI+QmFuZHdpdGggVXNhZ2U8L2g2PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTEgdGV4dC0yMiBmb250LXdlaWdodC1saWdodCI+OTAlPC9wPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8Yi1wcm9ncmVzcyB2YXJpYW50PSJkYW5nZXIiIGhlaWdodD0iNHB4IiA6dmFsdWU9InZhbHVlVHdvIj48L2ItcHJvZ3Jlc3M+CiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPk1vc3QgZGF0YSB1c2VkIGluIGxhc3QgNyBkYXlzPC9zbWFsbD4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTIgdGV4dC1tdXRlZCI+RGF0YSBVc2FnZTwvaDY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMSB0ZXh0LTIyIGZvbnQtd2VpZ2h0LWxpZ2h0Ij42MCU8L3A+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxiLXByb2dyZXNzIHZhcmlhbnQ9ImluZm8iIGhlaWdodD0iNHB4IiA6dmFsdWU9IjYwIj48L2ItcHJvZ3Jlc3M+CiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPk1vc3QgZGF0YSB1c2VkIGluIGxhc3QgNSBkYXlzPC9zbWFsbD4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIG8taGlkZGVuICI+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTIgdGV4dC1tdXRlZCI+RGF0YSBVc2FnZTwvaDY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMSB0ZXh0LTIyIGZvbnQtd2VpZ2h0LWxpZ2h0Ij42MCU8L3A+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxiLXByb2dyZXNzIHZhcmlhbnQ9Indhcm5pbmciIGhlaWdodD0iNHB4IiA6dmFsdWU9InZhbHVlVHdvIj48L2ItcHJvZ3Jlc3M+CiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPk1vc3QgZGF0YSB1c2VkIGluIGxhc3QgNSBkYXlzPC9zbWFsbD4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KCiAgICAgICAgPCEtLSBzbWFsbC13aXphcmRfdGhyZWUgcGhhc2UtMTIgLS0+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9Im1iLTMwIDAtaGlkZGVuIj4KICAgICAgICAgICAgICAgIDxiLXJvdz4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjciPgogICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InQtZm9udC1ib2xkZXIiPkhlbHBsaW5lPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj4yNiUgaGlnaGVyIHRoYW4gbGFzdCB5ZWFyPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBtZD0iNSIgY2xhc3M9InRleHQtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InQtZm9udC1ib2xkZXN0Ij42MiU8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPjMwR0I8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIG1kPSIxMiIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1wcm9ncmVzcyB2YXJpYW50PSJwcmltYXJ5IiBoZWlnaHQ9IjFyZW0iIDp2YWx1ZT0idmFsdWVUd28iPjwvYi1wcm9ncmVzcz4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0ibWItMzAgMC1oaWRkZW4iPgogICAgICAgICAgICAgICAgPGItcm93PgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBtZD0iNyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0idC1mb250LWJvbGRlciI+U2VydmljZTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+MTYlIGhpZ2hlciB0aGFuIGxhc3QgeWVhcjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjUiIGNsYXNzPSJ0ZXh0LXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0LWZvbnQtYm9sZGVzdCI+OTQ8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPjMwR0I8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIG1kPSIxMiIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1wcm9ncmVzcyB2YXJpYW50PSJ3YXJuaW5nIiBoZWlnaHQ9IjFyZW0iIDp2YWx1ZT0iMjAiPjwvYi1wcm9ncmVzcz4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgPC9iLWNvbD4KICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgPGItY2FyZCBjbGFzcz0ibWItMzAgMC1oaWRkZW4iPgogICAgICAgICAgICAgICAgPGItcm93PgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBtZD0iNyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0idC1mb250LWJvbGRlciI+RW1haWw8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPjE2JSBoaWdoZXIgdGhhbiBsYXN0IHllYXI8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIG1kPSI1IiBjbGFzcz0idGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idC1mb250LWJvbGRlc3QiPjEyMDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+b3V0IG9mIDFLPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBtZD0iMTIiIGNsYXNzPSJtdC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGItcHJvZ3Jlc3MgdmFyaWFudD0ic3VjY2VzcyIgaGVpZ2h0PSIxcmVtIiA6dmFsdWU9IjUwIj48L2ItcHJvZ3Jlc3M+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyI+CiAgICAgICAgICAgIDxiLWNhcmQgY2xhc3M9Im1iLTMwIDAtaGlkZGVuIj4KICAgICAgICAgICAgICAgIDxiLXJvdz4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjciPgogICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InQtZm9udC1ib2xkZXIiPlRlcnJpdG9yeTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+MTYlIGhpZ2hlciB0aGFuIGxhc3QgeWVhcjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjUiIGNsYXNzPSJ0ZXh0LXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0LWZvbnQtYm9sZGVzdCI+MTIwPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj5vdXQgb2YgMUs8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIG1kPSIxMiIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1wcm9ncmVzcyB2YXJpYW50PSJkYW5nZXIiIGhlaWdodD0iMXJlbSIgOnZhbHVlPSIzMCI+PC9iLXByb2dyZXNzPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDwhLS0gaW52b2ljZSAtLT4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjEyIiBjbGFzcz0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGItY2FyZCBuby1ib2R5IGNsYXNzPSJtYi0zMCBvLWhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jYXJkLWhlYWRlciBoZWFkZXItYmctdmFyaWFudD0icHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItcm93IHN0eWxlPSJhbGlnbi1pdGVtczpjZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtY2FyZC13aWRnZXRfX2hlYWQtbGFiZWwiPiAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LTE4IGZvbnQtd2VpZ2h0LTcwMCB0ZXh0LXdoaXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImktRm9sZGVyLVdpdGgtRG9jdW1lbnQgdGV4dC13aGl0ZSBtci0yIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3QgT2YgSW52b2ljZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBtZD0iNiIgY2xhc3M9InRleHQtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtY2FyZC13aWRnZXRfX2hlYWQtdG9vbGJhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItZHJvcGRvd24gIHZhcmlhbnQ9ImRhbmdlciIgc2l6ZT0ic20iIHRleHQ9IlN1bW1hcnkiIGNsYXNzPSJtLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1kcm9wZG93bi1pdGVtLWJ1dHRvbj5BY3Rpb248L2ItZHJvcGRvd24taXRlbS1idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWRyb3Bkb3duLWl0ZW0tYnV0dG9uPkFub3RoZXIgYWN0aW9uPC9iLWRyb3Bkb3duLWl0ZW0tYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1kcm9wZG93bi1pdGVtLWJ1dHRvbj5Tb21ldGhpbmcgZWxzZSBoZXJlLi4uPC9iLWRyb3Bkb3duLWl0ZW0tYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1kcm9wZG93bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItY2FyZC1oZWFkZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jYXJkLWJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0ZXh0LW11dGVkIHRleHQtMTQgZm9udC13ZWlnaHQtNTAwIj5GaW5hbCBDb21taXNzaW9uIFJldmVudWU8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtbXV0ZWQgdGV4dC0xOCBmb250LXdlaWdodC02MDAiPiQ3OTAsNDIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjYiIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0ZXh0LW11dGVkIHRleHQtMTQgZm9udC13ZWlnaHQtNTAwIj5GaW5hbCBDb21taXNzaW9uIFJldmVudWU8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtbXV0ZWQgdGV4dC0xOCBmb250LXdlaWdodC02MDAiPiBKdWx5IDI1LDIwMTk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jYXJkLWJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYXNpY0FyZWEtY2hhcnQiIGNsYXNzPSJtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXBleGNoYXJ0IHR5cGU9YXJlYSBoZWlnaHQ9MTYwIDpvcHRpb25zPSJzcGFyazMuY2hhcnRPcHRpb25zIiA6c2VyaWVzPSJzcGFyazMuc2VyaWVzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CgogICAgICAgIDwhLS0gdGVycml0b3J5IHBoYXNlLTEzIC0tPgogICAgICAgIDxiLWNvbCBtZD0iMTIiIGxnPSIxMiIgY2xhc3M9IiI+CiAgICAgICAgICAgIDxiLWNhcmQ+CiAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIG1kPSI2IiBsZz0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudC12NCBjYXJkLWljb24tYmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImktRXllIHRleHQtc3VjY2VzcyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idC1mb250LWJvbGRlc3QiPjQsMzc3PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5WaWV3ZXJzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQtdjQgY2FyZC1pY29uLWJnIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpLUxpa2UgdGV4dC1wcmltYXJ5Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InQtZm9udC1ib2xkZXN0Ij40NTY8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TGlrZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjYiIGxnPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jb250ZW50LXY0IGNhcmQtaWNvbi1iZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1GaWxlLUhvcml6b250YWwtVGV4dCB0ZXh0LWluZm8iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idC1mb250LWJvbGRlc3QiPjY1PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNvbW1lbnRzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBtZD0iNiIgbGc9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jb250ZW50LXY0IGNhcmQtaWNvbi1iZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1CdXNpbmVzcy1NYW4gICAgdGV4dC13YXJuaW5nIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InQtZm9udC1ib2xkZXN0Ij4yMEs8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Vmlld3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgPC9iLXJvdz4KPC9kaXY+Cg=="},null]}