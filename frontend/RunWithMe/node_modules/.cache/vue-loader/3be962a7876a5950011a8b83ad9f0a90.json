{"remainingRequest":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\multicampus\\Desktop\\vue-main\\src\\views\\app\\widgets\\widgetStatistics.vue?vue&type=template&id=02d500af&","dependencies":[{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\src\\views\\app\\widgets\\widgetStatistics.vue","mtime":1600674576000},{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\vue-main\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAibWFpbi1jb250ZW50IiB9LAogICAgWwogICAgICBfYygiYnJlYWRjdW1iIiwgewogICAgICAgIGF0dHJzOiB7IHBhZ2U6ICJXaWRnZXQgU3RhdGlzdGljcyIsIGZvbGRlcjogIldpZGdldHMiIH0KICAgICAgfSksCiAgICAgIF9jKAogICAgICAgICJiLXJvdyIsCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbGc6ICIzIiwgbWQ6ICI2Iiwgc206ICI2IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiY2FyZC1pY29uLWJnIGNhcmQtaWNvbi1iZy1wcmltYXJ5IG8taGlkZGVuIG1iLTMwIG8taGlkZGVuICB0ZXh0LWNlbnRlciIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImktQ2FyLUl0ZW1zIiB9KSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBtdC0yIG1iLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiTmV3IExlYWRzIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LXByaW1hcnkgdGV4dC0yNCBsaW5lLWhlaWdodC0xIG1iLTIiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiMjA1IildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IGxnOiAiMyIsIG1kOiAiNiIsIHNtOiAiNiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgImNhcmQtaWNvbi1iZyBjYXJkLWljb24tYmctcHJpbWFyeSBvLWhpZGRlbiBtYi0zMCBvLWhpZGRlbiAgdGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpLURhdGEtVXBsb2FkIiB9KSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBtdC0yIG1iLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRG93bmxvYWQiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtcHJpbWFyeSB0ZXh0LTI0IGxpbmUtaGVpZ2h0LTEgbWItMiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCI0MDIxIildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IGxnOiAiMyIsIG1kOiAiNiIsIHNtOiAiNiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgImNhcmQtaWNvbi1iZyBjYXJkLWljb24tYmctcHJpbWFyeSBvLWhpZGRlbiBtYi0zMCBvLWhpZGRlbiAgdGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpLUZlZWRidXJuZXIiIH0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIG10LTIgbWItMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJGZWVkYmFjayIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1wcmltYXJ5IHRleHQtMjQgbGluZS1oZWlnaHQtMSBtYi0yIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjgwIildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IGxnOiAiMyIsIG1kOiAiNiIsIHNtOiAiNiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgImNhcmQtaWNvbi1iZyBjYXJkLWljb24tYmctcHJpbWFyeSBvLWhpZGRlbiBtYi0zMCBvLWhpZGRlbiAgdGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpLUZpbGUtSG9yaXpvbnRhbC1UZXh0IiB9KSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBtdC0yIG1iLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiT3BpbmlvbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1wcmltYXJ5IHRleHQtMjQgbGluZS1oZWlnaHQtMSBtYi0yIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjEyMDAiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyAibm8tYm9keSI6ICIiLCB0aXRsZTogIiIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NoYXJ0LWluZm8iIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyIgfSwgW192bS5fdigiSU5DT01FIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY2hhcnQtbnVtYmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlc3QiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIkMTAwMCIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiNDYlIGNvbXBhcmVkIHRvIGxhc3QgeWVhciIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiYi1jYXJkLWJvZHkiLCB7IHN0YXRpY0NsYXNzOiAidWwtY2FyZF9fd2lkZ2V0LWNoYXJ0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJiYXNpY0FyZWEtY2hhcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImFyZWEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTUwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5zcGxpbmVBcmVhV2lkZ2V0LmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLnNwbGluZUFyZWFXaWRnZXQuc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgIm5vLWJvZHkiOiAiIiwgdGl0bGU6ICIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jaGFydC1pbmZvIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmciIH0sIFtfdm0uX3YoIkFQUFJPVkUiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jaGFydC1udW1iZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ0LWZvbnQtYm9sZGVzdCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiQ1MDAiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjQ2JSBjb21wYXJlZCB0byBsYXN0IHllYXIiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImItY2FyZC1ib2R5IiwgeyBzdGF0aWNDbGFzczogInVsLWNhcmRfX3dpZGdldC1jaGFydCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAiYmFzaWNBcmVhLWNoYXJ0IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJhcGV4Y2hhcnQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJhcmVhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE1MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfdm0uc3BsaW5lQXJlYVdpZGdldFR3by5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5zcGxpbmVBcmVhV2lkZ2V0VHdvLnNlcmllcwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiIG1iLTMwIG8taGlkZGVuICIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJuby1ib2R5IjogIiIsIHRpdGxlOiAiIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY2hhcnQtaW5mbyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoInRyYW5zYWN0aW9uIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY2hhcnQtbnVtYmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlc3QiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIkNDQsOTA5IikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCI0NiUgY29tcGFyZWQgdG8gbGFzdCB5ZWFyIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtYm9keSIsIHsgc3RhdGljQ2xhc3M6ICJ1bC1jYXJkX193aWRnZXQtY2hhcnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImJhc2ljQXJlYS1jaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnNwbGluZUFyZWFXaWRnZXRUaHJlZS5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5zcGxpbmVBcmVhV2lkZ2V0VGhyZWUuc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgIm5vLWJvZHkiOiAiIiwgdGl0bGU6ICIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jaGFydC1pbmZvIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmciIH0sIFtfdm0uX3YoIlNBTEVTIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY2hhcnQtbnVtYmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlc3QiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIkNTAwIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCI0NiUgY29tcGFyZWQgdG8gbGFzdCB5ZWFyIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtYm9keSIsIHsgc3RhdGljQ2xhc3M6ICJ1bC1jYXJkX193aWRnZXQtY2hhcnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImJhc2ljQXJlYS1jaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnNwbGluZUFyZWFXaWRnZXRGb3VyLmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLnNwbGluZUFyZWFXaWRnZXRGb3VyLnNlcmllcwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiIG1iLTMwIG8taGlkZGVuICIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJuby1ib2R5IjogIiIsIHRpdGxlOiAiIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY2hhcnQtaW5mbyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImg1IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIHRleHQtMjAgIGxpbmUtaGVpZ2h0LTEgbWItMyIgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpLUxpa2UtMiIgfSksIF92bS5fdigiIEFwcHJvdmUiKV0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jaGFydC1udW1iZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHt9LCBbX3ZtLl92KCI1NSwwMDAiKV0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtYm9keSIsIHsgc3RhdGljQ2xhc3M6ICJ1bC1jYXJkX193aWRnZXQtY2hhcnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImJhc2ljQXJlYS1jaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnNwbGluZUFyZWFXaWRnZXRGaXZlLmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLnNwbGluZUFyZWFXaWRnZXRGaXZlLnNlcmllcwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiIG1iLTMwIG8taGlkZGVuICIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJuby1ib2R5IjogIiIsIHRpdGxlOiAiIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY2hhcnQtaW5mbyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImg1IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIHRleHQtMjAgIGxpbmUtaGVpZ2h0LTEgbWItMyIgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaS1GaWxlLUhvcml6b250YWwtVGV4dCIgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIENvbW1lbnRzIikKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jaGFydC1udW1iZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHt9LCBbX3ZtLl92KCI1NSwwMDAiKV0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtYm9keSIsIHsgc3RhdGljQ2xhc3M6ICJ1bC1jYXJkX193aWRnZXQtY2hhcnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImJhc2ljQXJlYS1jaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnNwbGluZUFyZWFXaWRnZXRTaXguY2hhcnRPcHRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBfdm0uc3BsaW5lQXJlYVdpZGdldFNpeC5zZXJpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyAibm8tYm9keSI6ICIiLCB0aXRsZTogIiIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NoYXJ0LWluZm8iIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJoNSIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyB0ZXh0LTIwICBsaW5lLWhlaWdodC0xIG1iLTMiIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImktU2hhcmV0aGlzIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQ29udHJpYnV0aW9uIikKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jaGFydC1udW1iZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHt9LCBbX3ZtLl92KCI0NSwwMDAiKV0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtYm9keSIsIHsgc3RhdGljQ2xhc3M6ICJ1bC1jYXJkX193aWRnZXQtY2hhcnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImJhc2ljQXJlYS1jaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnNwbGluZUFyZWFXaWRnZXRTZXZlbi5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5zcGxpbmVBcmVhV2lkZ2V0U2V2ZW4uc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgIm5vLWJvZHkiOiAiIiwgdGl0bGU6ICIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jaGFydC1pbmZvIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiaDUiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRpbmcgdGV4dC0yMCAgbGluZS1oZWlnaHQtMSBtYi0zIiB9LAogICAgICAgICAgICAgICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImktRXllIiB9KSwgX3ZtLl92KCIgV2F0Y2giKV0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jaGFydC1udW1iZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHt9LCBbX3ZtLl92KCI3MCwwMDAiKV0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtYm9keSIsIHsgc3RhdGljQ2xhc3M6ICJ1bC1jYXJkX193aWRnZXQtY2hhcnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImJhc2ljQXJlYS1jaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnNwbGluZUFyZWFXaWRnZXRFaWdodC5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5zcGxpbmVBcmVhV2lkZ2V0RWlnaHQuc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiwgYXR0cnM6IHsgdGl0bGU6ICIiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX3JvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAid2lkZ2V0QmFyQ2hhcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLndpZGdldEJhckNoYXJ0LmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLndpZGdldEJhckNoYXJ0LnNlcmllcwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiIHRleHQtbXV0ZSBtLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgUGVvcGxlICIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIiB9LCBbX3ZtLl92KCIyLDc1MCIpXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiwgYXR0cnM6IHsgdGl0bGU6ICIiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX3JvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAid2lkZ2V0QmFyQ2hhcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLndpZGdldEJhckNoYXJ0VHdvLmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLndpZGdldEJhckNoYXJ0VHdvLnNlcmllcwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiIHRleHQtbXV0ZSBtLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgVmlld3MgIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmciIH0sIFtfdm0uX3YoIjIsNzUwIildKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiLCBhdHRyczogeyB0aXRsZTogIiIgfSB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fcm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJ3aWRnZXRCYXJDaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibGluZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLndpZGdldExpbmVDaGFydC5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS53aWRnZXRMaW5lQ2hhcnQuc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICIgdGV4dC1tdXRlIG0tMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHcm93dGggIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmciIH0sIFtfdm0uX3YoIjYsNzYwIildKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiLCBhdHRyczogeyB0aXRsZTogIiIgfSB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fcm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJ3aWRnZXRCYXJDaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibGluZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLndpZGdldExpbmVDaGFydC5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS53aWRnZXRMaW5lQ2hhcnQuc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICIgdGV4dC1tdXRlIG0tMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHcm93dGggIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmciIH0sIFtfdm0uX3YoIjYsNzYwIildKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiwgbXQ6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19yb3ctdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImNoYXJ0IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS53aWRnZXRCYXJDaGFydFRocmVlLmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS53aWRnZXRCYXJDaGFydFRocmVlLnNlcmllcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY29udGVudC12MiIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIG10LTMiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiNjk4IDIxMiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogIiB0ZXh0LW11dGVkIG0tMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgNTAlIEF2ZXJhZ2UgIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiwgbXQ6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19yb3ctdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImNoYXJ0IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS53aWRnZXRCYXJDaGFydEZvdXIuY2hhcnRPcHRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLndpZGdldEJhckNoYXJ0Rm91ci5zZXJpZXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyBtdC0zIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjM2OSAyMTIiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICIgdGV4dC1tdXRlZCBtLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIDI0JSBBdmVyYWdlICIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIsIG10OiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImItY2FyZCIsIHsgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fcm93LXYyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJjaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJhcGV4Y2hhcnQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfdm0ud2lkZ2V0QmFyQ2hhcnRGaXZlLmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS53aWRnZXRCYXJDaGFydEZpdmUuc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jb250ZW50LXYyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmcgbXQtMyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIzNjkgMjEyIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiIHRleHQtbXV0ZWQgbS0wIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAyNCUgQXZlcmFnZSAiKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiLCBtdDogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IHN0YXRpY0NsYXNzOiAiIG1iLTMwIG8taGlkZGVuICIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX3Jvdy12MiIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAiY2hhcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjEwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLndpZGdldEJhckNoYXJ0U2l4LmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS53aWRnZXRCYXJDaGFydFNpeC5zZXJpZXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyBtdC0zIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjM2OSAyMTIiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICIgdGV4dC1tdXRlZCBtLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIDI0JSBBdmVyYWdlICIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImItY2FyZCIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zMCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX3JvdyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldC1zdGF0X19mb250IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaS1Ib3RlbCB0ZXh0LXByaW1hcnkiIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIiBtLTAiIH0sIFtfdm0uX3YoIiBBc3NldHMgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyIgfSwgW192bS5fdigiNDAsODk0IildKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgeyBzdGF0aWNDbGFzczogIm1iLTMwIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fcm93IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0LXN0YXRfX2ZvbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpLUJhci1DaGFydCB0ZXh0LWRhbmdlciIgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiIG0tMCIgfSwgW192bS5fdigiIFByb2dyZXNzaW9uICIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmciIH0sIFtfdm0uX3YoIjgwJSIpXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImItY2FyZCIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zMCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX3JvdyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldC1zdGF0X19mb250IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaS1GdWxsLUNhcnQgdGV4dC1zdWNjZXNzIiB9KQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICIgbS0wIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBUb3RhbCBQcm9maXQgIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyIgfSwgW192bS5fdigi4KezIDIwMDAiKV0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IHN0YXRpY0NsYXNzOiAibWItMzAiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19yb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXQtc3RhdF9fZm9udCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImktQm9va21hcmsgdGV4dC13YXJuaW5nIiB9KQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICIgbS0wIiB9LCBbX3ZtLl92KCIgTGVhc2UgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyIgfSwgW192bS5fdigiIDUsNDE3IildKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19yb3ctdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImNoYXJ0IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicmFkaWFsQmFyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5yYWRpYWxCYXIuY2hhcnRPcHRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLnJhZGlhbEJhci5zZXJpZXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyBtdC0zIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlBlb3BsZSBDaG9pY2UgUmF0ZSIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImItY2FyZCIsIHsgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fcm93LXYyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJjaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJhcGV4Y2hhcnQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInJhZGlhbEJhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjUwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfdm0ucmFkaWFsQmFyVHdvLmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5yYWRpYWxCYXJUd28uc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jb250ZW50LXYyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmcgbXQtMyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJJdGVtIFBlbmRpbmciKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IHN0YXRpY0NsYXNzOiAiIG1iLTMwIG8taGlkZGVuICIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX3Jvdy12MiIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAiY2hhcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJyYWRpYWxCYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjI1MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnJhZGlhbEJhclRocmVlLmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5yYWRpYWxCYXJUaHJlZS5zZXJpZXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyBtdC0zIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlRvdGFsIFByb2ZpdCIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImItY2FyZCIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zMCBvLWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX3Jvdy12MiIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAiY2hhcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJyYWRpYWxCYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjI1MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnJhZGlhbEJhckZvdXIuY2hhcnRPcHRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLnJhZGlhbEJhckZvdXIuc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jb250ZW50LXYyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmcgbXQtMyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUb3RhbCBSZXZlbnVlIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI0IiwgbGc6ICI0IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1iLTMwIG8taGlkZGVuIiwgYXR0cnM6IHsgIm5vLWJvZHkiOiAiIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19yb3ctdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY29udGVudC12MiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmcgbXQtMyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjY5OCIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICIgdGV4dC1tdXRlZCBtLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgT3JkZXJzIFJlY2VpdmVkICIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImJhc2ljQXJlYS1jaGFydCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJhcmVhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTUwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLmJhc2ljQXJlYS5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLmJhc2ljQXJlYS5zZXJpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjQiLCBsZzogIjQiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibWItMzAgby1oaWRkZW4iLCBhdHRyczogeyAibm8tYm9keSI6ICIiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX3Jvdy12MiIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jb250ZW50LXYyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyBtdC0zIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiNSw3NjciKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiIHRleHQtbXV0ZWQgbS0wIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFRvdGFsIE1hcmtldGluZyAiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJiYXNpY0FyZWEtY2hhcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJhcGV4Y2hhcnQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE1MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5iYXNpY0FyZWFUd28uY2hhcnRPcHRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5iYXNpY0FyZWFUd28uc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI0IiwgbGc6ICI0IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1iLTMwIG8taGlkZGVuIiwgYXR0cnM6IHsgIm5vLWJvZHkiOiAiIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19yb3ctdjIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY29udGVudC12MiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmcgbXQtMyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiQ1LDc2NyIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICIgdGV4dC1tdXRlZCBtLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgVG90YWwgRWFybmluZyAiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJiYXNpY0FyZWEtY2hhcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJhcGV4Y2hhcnQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE1MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5iYXNpY0FyZWFUaHJlZS5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLmJhc2ljQXJlYVRocmVlLnNlcmllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImItY2FyZCIsIHsgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlcnZlciBzdGF0dXMgcmVnaW9uIDEiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC0yMCB0ZXh0LXN1Y2Nlc3MgbGluZS1oZWlnaHQtMSBtYi0zIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaS1BcnJvdy1VcC1pbi1DaXJjbGUiIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFVwIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiTGFzdCBkb3duIDQgZGF5cyBhZ28iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2VydmVyIHN0YXR1cyByZWdpb24gMiIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LTIwIHRleHQtc3VjY2VzcyBsaW5lLWhlaWdodC0xIG1iLTMiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpLUFycm93LVVwLWluLUNpcmNsZSIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgVXAiKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJMYXN0IGRvd24gNCBkYXlzIGFnbyIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IHN0YXRpY0NsYXNzOiAiIG1iLTMwIG8taGlkZGVuICIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZXJ2ZXIgc3RhdHVzIHJlZ2lvbiAzIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtMjAgdGV4dC1kYW5nZXIgbGluZS1oZWlnaHQtMSBtYi0zIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaS1BcnJvdy1Eb3duLWluLUNpcmNsZSIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRG93biIpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkxhc3QgZG93biA0IGRheXMgYWdvIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImItY2FyZCIsIHsgc3RhdGljQ2xhc3M6ICIgbWItMzAgby1oaWRkZW4gIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlcnZlciBzdGF0dXMgcmVnaW9uIDMiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC0yMCB0ZXh0LWRhbmdlciBsaW5lLWhlaWdodC0xIG1iLTMiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpLUFycm93LURvd24taW4tQ2lyY2xlIiB9KSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBEb3duIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiTGFzdCBkb3duIDQgZGF5cyBhZ28iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0xIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiVGFmZmljIGluIGxhc3QgMjRoIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC0yMiB0ZXh0LXN1Y2Nlc3MgZm9udC13ZWlnaHQtbGlnaHQgbWItMSIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiMTMwMDAiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNoYXJ0LXdyYXBwZXIiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjY1cHgiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJ2LWNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3B0aW9uczogX3ZtLndpZGdldEJhc2ljTGluZSwgYXV0b3Jlc2l6ZTogdHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IHN0YXRpY0NsYXNzOiAiIG1iLTMwIG8taGlkZGVuICIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTEiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUYWZmaWMgaW4gbGFzdCB3ZWVrIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtMjIgdGV4dC1kYW5nZXIgZm9udC13ZWlnaHQtbGlnaHQgbWItMSIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiNjUwNTgiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNoYXJ0LXdyYXBwZXIiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjY1cHgiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJ2LWNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLndpZGdldEJhc2ljTGluZVR3bywKICAgICAgICAgICAgICAgICAgICAgICAgYXV0b3Jlc2l6ZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0xIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiVGFmZmljIGluIGxhc3QgMjRoIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC0yMiB0ZXh0LXN1Y2Nlc3MgZm9udC13ZWlnaHQtbGlnaHQgbWItMSIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiMTMwMDAiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNoYXJ0LXdyYXBwZXIiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjY1cHgiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJ2LWNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3B0aW9uczogX3ZtLndpZGdldEJhc2ljTGluZSwgYXV0b3Jlc2l6ZTogdHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IHN0YXRpY0NsYXNzOiAiIG1iLTMwIG8taGlkZGVuICIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTEiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUYWZmaWMgaW4gbGFzdCB3ZWVrIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtMjIgdGV4dC1kYW5nZXIgZm9udC13ZWlnaHQtbGlnaHQgbWItMSIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiNjUwNTgiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNoYXJ0LXdyYXBwZXIiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjY1cHgiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJ2LWNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLndpZGdldEJhc2ljTGluZVR3bywKICAgICAgICAgICAgICAgICAgICAgICAgYXV0b3Jlc2l6ZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0yIHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlN0b3JhZ2UgVXNhZ2UiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibWItMSB0ZXh0LTIyIGZvbnQtd2VpZ2h0LWxpZ2h0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCI1MCUiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImItcHJvZ3Jlc3MiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjRweCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbHVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1vc3QgZGF0YSB1c2VkIGluIGxhc3QgMyBkYXlzIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0yIHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkJhbmR3aXRoIFVzYWdlIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIm1iLTEgdGV4dC0yMiBmb250LXdlaWdodC1saWdodCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiOTAlIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJiLXByb2dyZXNzIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiAiZGFuZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjRweCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbHVlVHdvCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1vc3QgZGF0YSB1c2VkIGluIGxhc3QgNyBkYXlzIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0yIHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkRhdGEgVXNhZ2UiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibWItMSB0ZXh0LTIyIGZvbnQtd2VpZ2h0LWxpZ2h0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCI2MCUiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImItcHJvZ3Jlc3MiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFyaWFudDogImluZm8iLCBoZWlnaHQ6ICI0cHgiLCB2YWx1ZTogNjAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1vc3QgZGF0YSB1c2VkIGluIGxhc3QgNSBkYXlzIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIiBtYi0zMCBvLWhpZGRlbiAiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0yIHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkRhdGEgVXNhZ2UiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibWItMSB0ZXh0LTIyIGZvbnQtd2VpZ2h0LWxpZ2h0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCI2MCUiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImItcHJvZ3Jlc3MiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjRweCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbHVlVHdvCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1vc3QgZGF0YSB1c2VkIGluIGxhc3QgNSBkYXlzIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1iLTMwIDAtaGlkZGVuIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYi1yb3ciLAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgbWQ6ICI3IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogInQtZm9udC1ib2xkZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkhlbHBsaW5lIikKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIyNiUgaGlnaGVyIHRoYW4gbGFzdCB5ZWFyIikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXJpZ2h0IiwgYXR0cnM6IHsgbWQ6ICI1IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlc3QiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiNjIlIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIzMEdCIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtdC0zIiwgYXR0cnM6IHsgbWQ6ICIxMiIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImItcHJvZ3Jlc3MiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiAicHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjFyZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbHVlVHdvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYi0zMCAwLWhpZGRlbiIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImItcm93IiwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IGF0dHJzOiB7IG1kOiAiNyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJ0LWZvbnQtYm9sZGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZXJ2aWNlIikKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIxNiUgaGlnaGVyIHRoYW4gbGFzdCB5ZWFyIikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXJpZ2h0IiwgYXR0cnM6IHsgbWQ6ICI1IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlc3QiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiOTQiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjMwR0IiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm10LTMiLCBhdHRyczogeyBtZDogIjEyIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYi1wcm9ncmVzcyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ6ICJ3YXJuaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMXJlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAyMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibWItMzAgMC1oaWRkZW4iIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJiLXJvdyIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBhdHRyczogeyBtZDogIjciIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRW1haWwiKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjE2JSBoaWdoZXIgdGhhbiBsYXN0IHllYXIiKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtcmlnaHQiLCBhdHRyczogeyBtZDogIjUiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJ0LWZvbnQtYm9sZGVzdCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIxMjAiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIm91dCBvZiAxSyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtMyIsIGF0dHJzOiB7IG1kOiAiMTIiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLXByb2dyZXNzIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxcmVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDUwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYi0zMCAwLWhpZGRlbiIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImItcm93IiwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IGF0dHJzOiB7IG1kOiAiNyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJ0LWZvbnQtYm9sZGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUZXJyaXRvcnkiKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjE2JSBoaWdoZXIgdGhhbiBsYXN0IHllYXIiKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtcmlnaHQiLCBhdHRyczogeyBtZDogIjUiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJ0LWZvbnQtYm9sZGVzdCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIxMjAiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIm91dCBvZiAxSyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtMyIsIGF0dHJzOiB7IG1kOiAiMTIiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLXByb2dyZXNzIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogImRhbmdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjFyZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMzAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICIxMiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYi0zMCBvLWhpZGRlbiIsIGF0dHJzOiB7ICJuby1ib2R5IjogIiIgfSB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYi1jYXJkLWhlYWRlciIsCiAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyAiaGVhZGVyLWJnLXZhcmlhbnQiOiAicHJpbWFyeSIgfSB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYi1yb3ciLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJhbGlnbi1pdGVtcyI6ICJjZW50ZXIiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgbWQ6ICI2IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInVsLWNhcmQtd2lkZ2V0X19oZWFkLWxhYmVsIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaDUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dC0xOCBmb250LXdlaWdodC03MDAgdGV4dC13aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImktRm9sZGVyLVdpdGgtRG9jdW1lbnQgdGV4dC13aGl0ZSBtci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTGlzdCBPZiBJbnZvaWNlcyAiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXJpZ2h0IiwgYXR0cnM6IHsgbWQ6ICI2IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ1bC1jYXJkLXdpZGdldF9faGVhZC10b29sYmFyIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYi1kcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm0tMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ6ICJkYW5nZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogInNtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICJTdW1tYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWRyb3Bkb3duLWl0ZW0tYnV0dG9uIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBY3Rpb24iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWRyb3Bkb3duLWl0ZW0tYnV0dG9uIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBbm90aGVyIGFjdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImItZHJvcGRvd24taXRlbS1idXR0b24iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNvbWV0aGluZyBlbHNlIGhlcmUuLi4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYi1jYXJkLWJvZHkiLAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYi1yb3ciLAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBhdHRyczogeyBtZDogIjYiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJoMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LW11dGVkIHRleHQtMTQgZm9udC13ZWlnaHQtNTAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJGaW5hbCBDb21taXNzaW9uIFJldmVudWUiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dC1tdXRlZCB0ZXh0LTE4IGZvbnQtd2VpZ2h0LTYwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiJDc5MCw0MjAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IGF0dHJzOiB7IG1kOiAiNiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtbXV0ZWQgdGV4dC0xNCBmb250LXdlaWdodC01MDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkZpbmFsIENvbW1pc3Npb24gUmV2ZW51ZSIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LW11dGVkIHRleHQtMTggZm9udC13ZWlnaHQtNjAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgSnVseSAyNSwyMDE5IildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtMiIsIGF0dHJzOiB7IGlkOiAiYmFzaWNBcmVhLWNoYXJ0IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJlYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfdm0uc3BhcmszLmNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5zcGFyazMuc2VyaWVzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICIxMiIsIGxnOiAiMTIiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJiLXJvdyIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBhdHRyczogeyBtZDogIjYiLCBsZzogIjMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidWwtd2lkZ2V0X19jb250ZW50LXY0IGNhcmQtaWNvbi1iZyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJpLUV5ZSB0ZXh0LXN1Y2Nlc3MiIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogInQtZm9udC1ib2xkZXN0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiNCwzNzciKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIlZpZXdlcnMiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY29udGVudC12NCBjYXJkLWljb24tYmciIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiaS1MaWtlIHRleHQtcHJpbWFyeSIgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlc3QiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCI0NTYiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIkxpa2VzIildKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IGF0dHJzOiB7IG1kOiAiNiIsIGxnOiAiMyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ1bC13aWRnZXRfX2NvbnRlbnQtdjQgY2FyZC1pY29uLWJnIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImktRmlsZS1Ib3Jpem9udGFsLVRleHQgdGV4dC1pbmZvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlc3QiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCI2NSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiQ29tbWVudHMiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgbWQ6ICI2IiwgbGc6ICIzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInVsLXdpZGdldF9fY29udGVudC12NCBjYXJkLWljb24tYmciIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaS1CdXNpbmVzcy1NYW4gICAgdGV4dC13YXJuaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidC1mb250LWJvbGRlc3QiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIyMEsiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIlZpZXdzIildKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}